model Studies {
    id              String           @id @default(cuid())
    cdp             Admins[]         @relation("cdp")
    auditors        Admins[]         @relation("auditor")
    information     StudyInfo?
    progess         StudyProgress?
    client          StudyClients[]
    studyProgressId String
    domains         Domains?         @relation(fields: [domainsId], references: [id])
    domainsId       String?
    MRIs            MRIs?
    studyAssigness  StudyAssigness[]
    clients         Clients?         @relation(fields: [clientsId], references: [id])
    clientsId       String?
    satisfactions   Satisfactions?
}

//? C'est quoi le champ `type`
model StudyInfo {
    id             String         @id @default(cuid())
    study          Studies        @relation(fields: [studyId], references: [id], onDelete: Cascade)
    studyId        String         @unique
    domaines       Domains[]
    title          String
    deliverable    Deliverables   @relation(fields: [deliverablesId], references: [id])
    assignee       StudyAssigness @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
    assigneeId     String         @unique
    mri            MRIs           @relation(fields: [mriId], references: [id])
    mriId          String         @unique
    applicationFee Float
    docs           StudyDocs[]
    deliverablesId String
    adminsId       String?
}

model StudyProgress {
    id      String            @id @default(cuid())
    study   Studies           @relation(fields: [studyId], references: [id], onDelete: Cascade)
    studyId String            @unique
    phases  Phases[]
    step    StudyProgressStep
}

enum StudyProgressStep {
    PRESTUDY
    TRI_PARTY_MEETING
    ASSIGNEE_PAPERS
    IN_STUDY
    ENDED
    ASSIGNEE_PAID
    COMAPNY_FACTORED
}

model Phases {
    id              String         @id @default(cuid())
    jeh             JEHs[]
    unitPrice       Float
    startDate       DateTime
    endDate         DateTime
    studyProgress   StudyProgress? @relation(fields: [studyProgressId], references: [id])
    studyProgressId String?
}

//? pk `deliverable` est un String et pas un Deliverables ?
model JEHs {
    id          String  @id @default(cuid())
    JEHnb       Int
    deliverable String
    Phases      Phases? @relation(fields: [phasesId], references: [id])
    phasesId    String?
}

model Domains {
    id          String     @id @default(cuid())
    name        String
    study       Studies[]
    studyInfo   StudyInfo? @relation(fields: [studyInfoId], references: [id])
    studyInfoId String?
}

model Deliverables {
    id        String      @id @default(cuid())
    content   String
    given     Boolean
    done      Boolean
    studyInfo StudyInfo[]
}

model StudyDocs {
    id          String     @id @default(cuid())
    ce          Docs       @relation("ce", fields: [ceId], references: [id], onDelete: Cascade)
    ceId        String     @unique
    cc          Docs       @relation("cc", fields: [ccId], references: [id], onDelete: Cascade)
    ccId        String     @unique
    br          Docs       @relation("br", fields: [brId], references: [id], onDelete: Cascade)
    brId        String     @unique
    rm          Docs       @relation("rm", fields: [rmId], references: [id], onDelete: Cascade)
    rmId        String     @unique
    ace         Docs       @relation("ace", fields: [aceId], references: [id], onDelete: Cascade)
    aceId       String     @unique
    arm         Docs       @relation("arm", fields: [armId], references: [id], onDelete: Cascade)
    armId       String     @unique
    acc         Docs       @relation("acc", fields: [accId], references: [id], onDelete: Cascade)
    accId       String     @unique
    bcrc        Docs       @relation("bcrc", fields: [bcrcId], references: [id], onDelete: Cascade)
    bcrcId      String     @unique
    pvri        Docs       @relation("pvri", fields: [pvriId], references: [id], onDelete: Cascade)
    pvriId      String     @unique
    pvrf        Docs       @relation("pvrf", fields: [pvrfId], references: [id], onDelete: Cascade)
    pvrfId      String     @unique
    bv          Docs       @relation("bv", fields: [bvId], references: [id], onDelete: Cascade)
    bvId        String     @unique
    cconf       Docs       @relation("cconf", fields: [cconfId], references: [id], onDelete: Cascade)
    cconfId     String     @unique
    studyInfo   StudyInfo? @relation(fields: [studyInfoId], references: [id])
    studyInfoId String?
}
